import { db, selectAndCount, parseTotalCount } from '../lib/db';
import { settings } from '../config/app.config';
import { logger } from '../lib/logger';
import { Filters } from '../models/filters.model';
import { {{ modelName }}, {{ modelName }}Update, {{ modelName }}Create, Partial{{ modelName }}Update } from '../models/{{ name }}.model';
import { applyPagination, applySorting, applySearch } from '../lib/filter';
import { tableNames, defaultFilters } from '../constants';

const defaultReturnValues = ['id'];

/**
 * Create new {{ name }}
 */
export async function create(values: {{ modelName }}Create): Promise<{{ modelName }}> {
  const query = db(tableNames.{{ tableName }})
    .insert(values, defaultReturnValues);

  logger.debug(`Create new {{ name }}: ${query.toString()}`);
  return (await query)[0];
}


/**
 * Update an existing {{ name }}
 */
export async function update({{ name }}Id: string, values: {{ modelName }}Update | Partial{{ modelName }}Update): Promise<{{ modelName }}> {
  const query = db(tableNames.{{ tableName }})
    .update(values, defaultReturnValues)
    .where('id', {{ name }}Id);

  logger.debug(`Update existing {{ name }}: ${query.toString()}`);
  return (await query)[0];
}

/**
 * Remove an existing {{ name }}
 */
export async function remove({{ name }}Id: string): Promise<{ affectedRows: number }> {
  const query = db(tableNames.{{ tableName }})
    .del()
    .where('id', {{ name }}Id);

  logger.debug(`Delete existing {{ name }}: ${query.toString()}`);
  return { affectedRows: (await query) };
}


/**
 * Return all {{ pluralName }}
 */
export async function findAll(options: Filters = {}): Promise<{ data: {{ modelName }}[], totalCount: number }> {
  const allOptions = Object.assign({}, defaultFilters, options);
  const searchFields = ['id'];
  const sortFields = ['id'];

  const query = selectAndCount(db, defaultReturnValues)
    .from(tableNames.{{ tableName }});

  applyPagination(query, allOptions);
  applySearch(query, allOptions, searchFields);
  applySorting(query, allOptions, sortFields);
  logger.debug(`Get all {{ pluralName }}: ${query.toString()}`);

  const data = (await query);
  return { data, totalCount: parseTotalCount(data) };
}


/**
 * Get a {{ name }} by id
 */
export async function findById(id: string): Promise<{{ modelName }}> {
  const query = db(tableNames.{{ tableName }})
    .select(defaultReturnValues)
    .where('id', id)
    .first();

  logger.debug(`Get {{ name }} by id: ${query.toString()}`);
  return query;
}
